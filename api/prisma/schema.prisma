generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum BookVisibility {
  public
  private
  unlisted
}

model User {
  id            String         @id @default(uuid())
  name          String
  email         String         @unique
  passwordHash  String
  roles         String[]       @default(["user"])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  refreshTokens RefreshToken[]
  ratings       Rating[]
  books         Book[]         @relation("owner_books")
  events        Event[] // <-- relation to Event

  @@index([email])
}

model RefreshToken {
  id        String   @id @default(uuid())
  tokenHash String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  revoked   Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([createdAt])
}

model Book {
  id          String         @id @default(uuid())
  title       String
  description String?
  isbn        String?        @unique
  authors     String[] // e.g. ["Author A","Author B"]
  categories  String[] // text[]
  fileKey     String? // storage object key / path
  coverKey    String?
  visibility  BookVisibility @default(public)
  owner       User?          @relation("owner_books", fields: [ownerId], references: [id])
  ownerId     String?
  avgRating   Float          @default(0)
  ratingCount Int            @default(0)
  deleted     Boolean        @default(false)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  ratings     Rating[]
  events      Event[] // <-- relation to Event

  @@index([ownerId])
  @@index([createdAt])
  @@index([title])
}

model Rating {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  book      Book     @relation(fields: [bookId], references: [id])
  bookId    String
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, bookId])
  @@index([bookId])
  @@index([userId])
}

model Event {
  id String @id @default(uuid())

  // optional relation to User (anonymous events possible)
  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  // optional relation to Book (events may or may not reference a book)
  book   Book?   @relation(fields: [bookId], references: [id])
  bookId String?

  eventType String
  meta      Json?
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([bookId])
  @@index([eventType])
}

model ModelArtifact {
  id        String   @id @default(uuid())
  name      String
  version   String
  metrics   Json?
  path      String // file path or storage key
  createdAt DateTime @default(now())

  @@index([name])
  @@index([createdAt])
}

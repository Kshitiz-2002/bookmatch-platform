generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(uuid())
  name         String
  email        String         @unique
  password     String
  roles        String[]       @default(["user"])
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  refreshTokens RefreshToken[]
  ratings      Rating[]
  reviews      Review[]
  events       Event[]
  books        Book[]         @relation("BookOwner")
}

model RefreshToken {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  tokenHash String
  revoked   Boolean  @default(false)
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model Book {
  id          String    @id @default(uuid())
  title       String
  authors     String[]
  description String?
  isbn        String?   @unique
  categories  String[]
  fileKey     String
  coverKey    String?
  visibility  String    @default("public")
  ownerId     String
  owner       User      @relation("BookOwner", fields: [ownerId], references: [id])
  avgRating   Float     @default(0.0)
  ratingCount Int       @default(0)
  deleted     Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  ratings     Rating[]
  reviews     Review[]
}

model Rating {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  book      Book     @relation(fields: [bookId], references: [id])
  bookId    String
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, bookId])
}

model Review {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  book      Book     @relation(fields: [bookId], references: [id])
  bookId    String
  content   String
  isSpoiler Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id        String   @id @default(uuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  bookId    String?
  event     String
  meta      Json?
  createdAt DateTime @default(now())
}

model Recommendation {
  id        String   @id @default(uuid())
  userId    String
  items     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ttl       DateTime
}

model ModelJob {
  id        String   @id @default(uuid())
  kind      String
  status    String   @default("pending")
  metrics   Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
